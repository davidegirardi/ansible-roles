---
- name: Download spice tools
  win_get_url:
    url: https://www.spice-space.org/download/windows/spice-guest-tools/spice-guest-tools-latest.exe
    dest: "{{ ansible_env.TEMP }}"

- name: Check vdagent services
  win_service:
    name: vdservice
  register: vdservice_result

- name: Install vdagent
  block:
    - name: Download vdagent
      win_get_url:
        url: "https://www.spice-space.org/download/windows/vdagent/vdagent-win-{{ vdagent_win_version }}/vdagent-win-{{ vdagent_win_version }}-x64.zip"
        dest: "{{ ansible_env.TEMP }}\\vdagent-win.zip"

    - name: Create {{ ansible_env['ProgramFiles(x86)'] }}\\SPICE Guest Tools directory
      win_file:
        path: "{{ ansible_env['ProgramFiles(x86)'] }}\\SPICE Guest Tools"
        state: directory

    - name: Extract vdagent archive
      win_unzip:
        src: "{{ ansible_env.TEMP }}\\vdagent-win.zip"
        dest: "{{ ansible_env.TEMP }}"
        delete_archive: yes

    - name: Move vdagent binaries to final destination ({{ ansible_env['ProgramFiles(x86)'] }}\\SPICE Guest Tools)
      win_copy:
        src: "{{ ansible_env.TEMP }}\\vdagent-win-{{ vdagent_win_version }}-x64\\"
        dest: "{{ ansible_env['ProgramFiles(x86)'] }}\\SPICE Guest Tools\\"
        remote_src: yes

    - name: Delete unpacked vdagent binaries
      win_file:
        path: "{{ ansible_env.TEMP }}\\vdagent-win-{{ vdagent_win_version }}-{{ ansible_env.PROCESSOR_ARCHITECTURE | lower }}"
        state: absent

    - name: Install vdagent
      win_command: "\"{{ ansible_env['ProgramFiles(x86)'] }}\\SPICE Guest Tools\\vdservice.exe\" install"
  when: vdservice_result.state is not defined or vdservice_result.name is not defined


- name: Get list of all drivers
  win_command: driverquery /V
  changed_when: False
  register: driver_list

- name: Check if Red Hat certificate is not already installed
  win_shell: 'Get-ChildItem -Path Cert:\LocalMachine\TrustedPublisher'
  changed_when: False
  register: cert_check

- name: cert check
  debug:
    msg: '{{ cert_check }}'

- name: Check if virtio iso is mounted
  win_stat:
    path: E:\guest-agent
  register: virtio

- name: Set virtio_win_iso_path
  set_fact:
    virtio_win_iso_path: E:\\
  when: virtio.stat.exists is true

- name: Download virtio-win.iso
  win_get_url:
    url: "{{ virtio_win_iso_url }}"
    force: no
    dest: "{{ ansible_env.TEMP }}\\virtio-win.iso"
  when: virtio_win_iso_path is not defined

- name: Mount virtio-win.iso
  win_disk_image:
    image_path: "{{ ansible_env.TEMP }}\\virtio-win.iso"
  register: win_disk_image
  when: virtio_win_iso_path is not defined

- name: Set the virtio_win_iso_path from predefined value or mounted ISO
  set_fact:
    virtio_win_iso_path: "{{ win_disk_image.mount_path }}"
  when: virtio_win_iso_path is not defined

- name: Install RH certificate
  block:
    - name: Export Cert from qxldod
      win_shell: '$cert = (Get-AuthenticodeSignature "{{ virtio_win_iso_path }}\qxldod\{{ virtio_driver_directory }}\amd64\qxldod.cat").SignerCertificate; [System.IO.File]::WriteAllBytes("{{ ansible_env.TEMP }}\redhat_qxldod.cer", $cert.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert));'

    - name: Export Cert from vioserial
      win_shell: '$cert = (Get-AuthenticodeSignature "{{ virtio_win_iso_path }}\vioserial\{{ virtio_driver_directory }}\amd64\vioser.cat").SignerCertificate; [System.IO.File]::WriteAllBytes("{{ ansible_env.TEMP }}\redhat_vioser.cer", $cert.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert));'

    - name: Export Cert from balloon
      win_shell: '$cert = (Get-AuthenticodeSignature "{{ virtio_win_iso_path }}\Balloon\{{ virtio_driver_directory }}\amd64\blnsvr.exe").SignerCertificate; [System.IO.File]::WriteAllBytes("{{ ansible_env.TEMP }}\redhat_balloon.cer", $cert.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert));'

    - name: Install RH certificate (qxldod) to TrustedPublisher certificate store
      win_command: 'certutil.exe -f -addstore "TrustedPublisher" {{ ansible_env.TEMP }}\redhat_qxldod.cer'

    - name: Install RH certificate (vioser) to TrustedPublisher certificate store
      win_command: 'certutil.exe -f -addstore "TrustedPublisher" {{ ansible_env.TEMP }}\redhat_vioser.cer'

    - name: Install RH certificate (Balloon) to TrustedPublisher certificate store
      win_command: 'certutil.exe -f -addstore "TrustedPublisher" {{ ansible_env.TEMP }}\redhat_balloon.cer'
  when: cert_check.stdout is not search("Red Hat")

- name: Install the Virtio Network Driver (netkvm)
  win_command: "pnputil -i -a \"{{ virtio_win_iso_path }}\\NetKVM\\{{ virtio_driver_directory }}\\{{ ansible_env.PROCESSOR_ARCHITECTURE | lower }}\\*.inf\""
  when: driver_list.stdout is not search("netkvm")

- name: Install the Virtio Block Driver (viostor)
  win_command: "pnputil -i -a \"{{ virtio_win_iso_path }}\\viostor\\{{ virtio_driver_directory }}\\{{ ansible_env.PROCESSOR_ARCHITECTURE | lower }}\\*.inf\""
  when: driver_list.stdout is not search("viostor")

- name: Install the QXL Graphics Driver (qxldod)
  win_command: "pnputil -i -a \"{{ virtio_win_iso_path }}\\qxldod\\{{ virtio_driver_directory }}\\{{ ansible_env.PROCESSOR_ARCHITECTURE | lower }}\\*.inf\""
  when: driver_list.stdout is not search("qxldod")

- name: Install the Balloon Driver (Balloon)
  win_command: "pnputil -i -a \"{{ virtio_win_iso_path }}\\Balloon\\{{ virtio_driver_directory }}\\{{ ansible_env.PROCESSOR_ARCHITECTURE | lower }}\\*.inf\""
  when: driver_list.stdout is not search("balloon")

- name: Install Virtio eNG driver (viorng)
  win_command: "pnputil -i -a \"{{ virtio_win_iso_path }}\\viorng\\{{ virtio_driver_directory }}\\{{ ansible_env.PROCESSOR_ARCHITECTURE | lower }}\\*.inf\""
  when: driver_list.stdout is not search("viorng")

- name: Install Virtio serial driver (vioserial)
  win_command: "pnputil -i -a \"{{ virtio_win_iso_path }}\\vioserial\\{{ virtio_driver_directory }}\\{{ ansible_env.PROCESSOR_ARCHITECTURE | lower }}\\*.inf\""
  when: driver_list.stdout is not search("vioser")

- name: Install Virtio Input driver (vioinput)
  win_command: "pnputil -i -a \"{{ virtio_win_iso_path }}\\vioinput\\{{ virtio_driver_directory }}\\{{ ansible_env.PROCESSOR_ARCHITECTURE | lower }}\\*.inf\""
  when: driver_list.stdout is not search("vioinput")

- name: Install pvpanic device driver (pvpanic)
  win_command: "pnputil -i -a \"{{ virtio_win_iso_path }}\\pvpanic\\{{ virtio_driver_directory }}\\{{ ansible_env.PROCESSOR_ARCHITECTURE | lower }}\\*.inf\""
  when: driver_list.stdout is not search("pvpanic")

- name: Install and enable spice-webdavd service (spice-webdavd-x64-latest.msi)
  win_package:
    path: "https://www.spice-space.org/download/windows/spice-webdavd/spice-webdavd-x64-latest.msi"
    creates_path: "{{ ansible_env['ProgramFiles'] }}\\SPICE webdavd"

- name: Unmount virtio-win.iso
  win_disk_image:
    image_path: "{{ ansible_env.TEMP }}\\virtio-win.iso"
    state: absent
  when: win_disk_image.mount_path is defined

- name: Cleanup
  win_file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ ansible_env.TEMP }}\\redhat_balloon.cer"
    - "{{ ansible_env.TEMP }}\\redhat_qxldod.cer"
    - "{{ ansible_env.TEMP }}\\redhat_vioser.cer"
    - "{{ ansible_env.TEMP }}\\virtio-win.iso"

#---
#- name: Check vdagent services
#  win_service:
#    name: vdservice
#  register: vdservice_result
#
#- name: Install vdagent
#  block:
#    - name: Download vdagent
#      win_get_url:
#        url: "https://www.spice-space.org/download/windows/vdagent/vdagent-win-{{ vdagent_win_version }}/vdagent-win-{{ vdagent_win_version }}-x64.zip"
#        dest: "{{ ansible_env.TEMP }}\\vdagent-win.zip"
#
#    - name: Create {{ ansible_env['ProgramFiles(x86)'] }}\\SPICE Guest Tools directory
#      win_file:
#        path: "{{ ansible_env['ProgramFiles(x86)'] }}\\SPICE Guest Tools"
#        state: directory
#
#    - name: Extract vdagent archive
#      win_unzip:
#        src: "{{ ansible_env.TEMP }}\\vdagent-win.zip"
#        dest: "{{ ansible_env.TEMP }}"
#        delete_archive: yes
#
#    - name: Move vdagent binaries to final destination ({{ ansible_env['ProgramFiles(x86)'] }}\\SPICE Guest Tools)
#      win_copy:
#        src: "{{ ansible_env.TEMP }}\\vdagent-win-{{ vdagent_win_version }}-x64\\"
#        dest: "{{ ansible_env['ProgramFiles(x86)'] }}\\SPICE Guest Tools\\"
#        remote_src: yes
#
#    - name: Delete unpacked vdagent binaries
#      win_file:
#        path: "{{ ansible_env.TEMP }}\\vdagent-win-{{ vdagent_win_version }}-{{ ansible_env.PROCESSOR_ARCHITECTURE | lower }}"
#        state: absent
#
#    - name: Install vdagent
#      win_command: "\"{{ ansible_env['ProgramFiles(x86)'] }}\\SPICE Guest Tools\\vdservice.exe\" install"
#  when: vdservice_result.state is not defined or vdservice_result.name is not defined
#
#
#- name: Get list of all drivers
#  win_command: driverquery /V
#  changed_when: False
#  register: driver_list
#
#- name: Check if Red Hat certificate is not already installed
#  win_shell: 'Get-ChildItem -Path Cert:\LocalMachine\TrustedPublisher'
#  changed_when: False
#  register: cert_check
#
#- name: Check if virtio iso is mounted
#  win_stat:
#    path: E:\guest-agent
#  register: virtio
#
#- name: Set virtio_win_iso_path
#  set_fact:
#    virtio_win_iso_path: E:\\
#  when: virtio.stat.exists is true
#
#- name: Download virtio-win.iso
#  win_get_url:
#    url: "{{ virtio_win_iso_url }}"
#    force: no
#    dest: "{{ ansible_env.TEMP }}\\virtio-win.iso"
#  when: virtio_win_iso_path is not defined
#
#- name: Mount virtio-win.iso
#  win_disk_image:
#    image_path: "{{ ansible_env.TEMP }}\\virtio-win.iso"
#  register: win_disk_image
#  when: virtio_win_iso_path is not defined
#
#- name: Set the virtio_win_iso_path from predefined value or mounted ISO
#  set_fact:
#    virtio_win_iso_path: "{{ win_disk_image.mount_path }}"
#  when: virtio_win_iso_path is not defined
#
#- name: Install RH certificate
#  block:
#    - name: Export Cert from qxldod
#      win_shell: '$cert = (Get-AuthenticodeSignature "{{ virtio_win_iso_path }}\qxldod\{{ virtio_driver_directory }}\amd64\qxldod.cat").SignerCertificate; [System.IO.File]::WriteAllBytes("{{ ansible_env.TEMP }}\redhat_qxldod.cer", $cert.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert));'
#
#    - name: Export Cert from balloon
#      win_shell: '$cert = (Get-AuthenticodeSignature "{{ virtio_win_iso_path }}\Balloon\{{ virtio_driver_directory }}\amd64\blnsvr.exe").SignerCertificate; [System.IO.File]::WriteAllBytes("{{ ansible_env.TEMP }}\redhat_balloon.cer", $cert.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert));'
#
#    - name: Install RH certificate (qxldod) to TrustedPublisher certificate store
#      win_command: 'certutil.exe -f -addstore "TrustedPublisher" {{ ansible_env.TEMP }}\redhat_qxldod.cer'
#
#    - name: Install RH certificate (Balloon) to TrustedPublisher certificate store
#      win_command: 'certutil.exe -f -addstore "TrustedPublisher" {{ ansible_env.TEMP }}\redhat_balloon.cer'
#  when: cert_check.stdout is not search("Red Hat")
#
#- name: Install the Virtio Network Driver (netkvm)
#  win_command: "pnputil -i -a \"{{ virtio_win_iso_path }}\\NetKVM\\{{ virtio_driver_directory }}\\{{ ansible_env.PROCESSOR_ARCHITECTURE | lower }}\\*.inf\""
#  when: driver_list.stdout is not search("netkvm")
#
#- name: Install the Virtio Block Driver (viostor)
#  win_command: "pnputil -i -a \"{{ virtio_win_iso_path }}\\viostor\\{{ virtio_driver_directory }}\\{{ ansible_env.PROCESSOR_ARCHITECTURE | lower }}\\*.inf\""
#  when: driver_list.stdout is not search("viostor")
#
#- name: Install the QXL Graphics Driver (qxldod)
#  win_command: "pnputil -i -a \"{{ virtio_win_iso_path }}\\qxldod\\{{ virtio_driver_directory }}\\{{ ansible_env.PROCESSOR_ARCHITECTURE | lower }}\\*.inf\""
#  when: driver_list.stdout is not search("qxldod")
#
#- name: Install the Balloon Driver (Balloon)
#  win_command: "pnputil -i -a \"{{ virtio_win_iso_path }}\\Balloon\\{{ virtio_driver_directory }}\\{{ ansible_env.PROCESSOR_ARCHITECTURE | lower }}\\*.inf\""
#  when: driver_list.stdout is not search("balloon")
#
#- name: Install Virtio RNG driver (viorng)
#  win_command: "pnputil -i -a \"{{ virtio_win_iso_path }}\\viorng\\{{ virtio_driver_directory }}\\{{ ansible_env.PROCESSOR_ARCHITECTURE | lower }}\\*.inf\""
#  when: driver_list.stdout is not search("viorng")
#
#- name: Install Virtio serial driver (vioserial)
#  win_command: "pnputil -i -a \"{{ virtio_win_iso_path }}\\vioserial\\{{ virtio_driver_directory }}\\{{ ansible_env.PROCESSOR_ARCHITECTURE | lower }}\\*.inf\""
#  when: driver_list.stdout is not search("vioser")
#
#- name: Install Virtio Input driver (vioinput)
#  win_command: "pnputil -i -a \"{{ virtio_win_iso_path }}\\vioinput\\{{ virtio_driver_directory }}\\{{ ansible_env.PROCESSOR_ARCHITECTURE | lower }}\\*.inf\""
#  when: driver_list.stdout is not search("vioinput")
#
#- name: Install pvpanic device driver (pvpanic)
#  win_command: "pnputil -i -a \"{{ virtio_win_iso_path }}\\pvpanic\\{{ virtio_driver_directory }}\\{{ ansible_env.PROCESSOR_ARCHITECTURE | lower }}\\*.inf\""
#  when: driver_list.stdout is not search("pvpanic")
#
#- name: Install Qemu Guest Agent (qemu-ga-x64.msi)
#  win_package:
#    path: "{{ virtio_win_iso_path }}\\guest-agent\\qemu-ga-x86_64.msi"
#    creates_path: "{{ ansible_env['ProgramFiles'] }}\\qemu-ga"
#
#- name: Install and enable spice-webdavd service (spice-webdavd-x64-latest.msi)
#  win_package:
#    path: "https://www.spice-space.org/download/windows/spice-webdavd/spice-webdavd-x64-latest.msi"
#    creates_path: "{{ ansible_env['ProgramFiles'] }}\\SPICE webdavd"
#
#- name: Unmount virtio-win.iso
#  win_disk_image:
#    image_path: "{{ ansible_env.TEMP }}\\virtio-win.iso"
#    state: absent
#  when: win_disk_image.mount_path is defined
#
#- name: Cleanup
#  win_file:
#    path: "{{ item }}"
#    state: absent
#  with_items:
#    - "{{ ansible_env.TEMP }}\\redhat_balloon.cer"
#    - "{{ ansible_env.TEMP }}\\redhat_qxldod.cer"
#    - "{{ ansible_env.TEMP }}\\virtio-win.iso"
