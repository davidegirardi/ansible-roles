---

- name: Define Debian-based KVM packages
  block:
    - name: Required packages
      set_fact:
        packages:
          present:
          - gir1.2-spiceclientgtk-3.0
          - dnsmasq
          - libvirt-clients
          - libvirt-daemon-system
          - libnss-libvirt
          - qemu-kvm
          - qemu-utils
          - spice-client-gtk
    - name: Libvirt guests file path
      set_fact:
        libvirt_guest_filename: /etc/default/libvirt-guests
  when: ansible_facts['os_family'] == "Debian" or ansible_facts['os_family'] == "Ubuntu"

- name: Define Arch-based KVM packages
  block:
    - name: Required packages
      set_fact:
        packages:
          present:
            - bridge-utils
            - dnsmasq
            - libvirt
            - iptables-nft
            - qemu
            - virt-manager
            - virt-viewer
    - name: Libvirt guests file path
      set_fact:
        libvirt_guest_filename: /etc/conf.d/libvirt-guests
  when: ansible_facts['os_family'] == "Archlinux"

- name: Install packages
  include_role:
    name: install_packages

- name: Configure DNS resolution
  block:
  - name: Enable systemd-resolved
    become: yes
    service:
      name: systemd-resolved
      enabled: yes
      state: started
  - name: Add libvirt_guest to nsswitch
    become: yes
    lineinfile:
      path: /etc/nsswitch.conf
      regexp: '^hosts:\s(?!libvirt_guest)(.*)$'
      line: 'hosts: libvirt_guest \1'
      backrefs: yes

- name: Run QEMU as low privileged user
  block:
    - name: Set the user
      become: yes
      lineinfile:
        path: /etc/libvirt/qemu.conf
        regexp: '^user = '
        line: 'user = "{{ qemu_user }}"'
      notify: 'restart_libvirtd'
    - name: Set the group
      become: yes
      lineinfile:
        path: /etc/libvirt/qemu.conf
        regexp: '^group = '
        line: 'group = "{{ qemu_group }}"'
      notify: 'restart_libvirtd'

- name: Configure security driver
  become: yes
  lineinfile:
    path: /etc/libvirt/qemu.conf
    regexp: '^security_driver = '
    line: 'security_driver = "none"'
  notify: 'restart_libvirtd'
  when: ansible_facts['os_family'] == "Debian" or ansible_facts['os_family'] == "Ubuntu"

- name: Configure libvirt-guests
  become: yes
  lineinfile:
    path: '{{ libvirt_guest_filename }}'
    line: "ON_SHUTDOWN={{ on_shutdown }}"
    mode: 0644
    owner: root
    group: root
    create: yes

- name: Start libvirt-guests
  become: yes
  service:
    name: libvirt-guests
    enabled: yes
    state: started
